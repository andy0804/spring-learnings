import org.springframework.beans.factory.annotation.Value;
import org.springframework.cloud.gateway.filter.GatewayFilter;
import org.springframework.cloud.gateway.filter.factory.RewritePathGatewayFilterFactory;
import org.springframework.cloud.gateway.handler.predicate.PathRoutePredicate;
import org.springframework.cloud.gateway.route.RouteLocator;
import org.springframework.cloud.gateway.route.builder.RouteLocatorBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.server.ServerWebExchange;

@Configuration
public class GatewayConfig {

    @Value("${math-service-url}") // Configure this in your application.properties
    private String mathServiceUrl;

    @Bean
    public RouteLocator customRouteLocator(RouteLocatorBuilder builder, RewritePathGatewayFilterFactory rewritePath) {
        return builder.routes()
            .route("my-path-route", r -> r
                .path("/fc/my-path")
                .filters(f -> f
                    .filter(rewritePath.regex("/fc").replacement(""))
                    .filter(rewritePath.regex("\\?(.*)$").replacement("?$1"))
                    .filter(dynamicallyAddQueryParameters())
                )
                .uri(mathServiceUrl))
            .build();
    }

     private GatewayFilter dynamicallyAddQueryParameters() {
        return (exchange, chain) -> {
            // Extract query parameters from the incoming request
            String name = exchange.getRequest().getQueryParams().getFirst("name");
            String otherParam = exchange.getRequest().getQueryParams().getFirst("otherParam");

            // Build the new query string dynamically
            UriComponentsBuilder uriBuilder = UriComponentsBuilder.fromUri(exchange.getRequest().getURI());

            if (name != null) {
                uriBuilder.queryParam("name", name);
            }
            if (otherParam != null) {
                uriBuilder.queryParam("otherParam", otherParam);
            }

            // Update the request URI with the new query string
            ServerWebExchange mutatedExchange = exchange.mutate()
                .request(exchange.getRequest().mutate()
                    .uri(uriBuilder.build().toUri())
                    .build())
                .build();

            return chain.filter(mutatedExchange);
        };
    }
    }
}
