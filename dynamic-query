import org.springframework.beans.factory.annotation.Value;
import org.springframework.cloud.gateway.filter.GatewayFilter;
import org.springframework.cloud.gateway.filter.factory.RewritePathGatewayFilterFactory;
import org.springframework.cloud.gateway.handler.predicate.PathRoutePredicate;
import org.springframework.cloud.gateway.route.RouteLocator;
import org.springframework.cloud.gateway.route.builder.RouteLocatorBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.server.ServerWebExchange;

@Configuration
public class GatewayConfig {

    @Value("${math-service-url}") // Configure this in your application.properties
    private String mathServiceUrl;

   private GatewayFilter appendQueryParameters() {
    return (exchange, chain) -> {
        // Get the original URI as a string
        String originalUri = exchange.getRequest().getURI().toString();
        
        // Check for query parameters
        String queryString = exchange.getRequest().getURI().getRawQuery();
        if (queryString != null && !queryString.isEmpty()) {
            // Append query parameters to the URI
            String updatedUri = originalUri + "?" + queryString;
            
            // Create a new ServerHttpRequest with the modified URI
            exchange.getAttributes().put("exchange.request.uri", updatedUri);
        }
        
        // Continue with the request chain
        return chain.filter(exchange);
    };
}
    @Bean
    public RouteLocator customRouteLocator(RouteLocatorBuilder builder, RewritePathGatewayFilterFactory rewritePath) {
        return builder.routes()
            .route("my-path-route", r -> r
                .path("/fc/my-path")
                .filters(f -> f
                    .filter(rewritePath.regex("/fc").replacement(""))
                    .filter(rewritePath.regex("\\?(.*)$").replacement("?$1"))
                    .filter(dynamicallyAddQueryParameters())
                )
                .uri(mathServiceUrl))
            .build();
    }
public RouteLocator customRouteLocator(RouteLocatorBuilder builder, AppConfig appConfig) {
    return builder.routes()
        .route("my-path-route", r -> r
            .path("/fc/raptor")
            .filters(f -> f
                .addRequestHeader(ORIGIN, appConfig.get(FC.URL))
                .rewritePath("/fc/raptor", "/raptor")
                .modifyResponseBody(String.class, String.class,
                    (exchange, response) -> {
                        // Append query parameters to the URI if they exist
                        ServerHttpRequest request = exchange.getRequest();
                        String queryString = request.getURI().getRawQuery();
                        if (queryString != null && !queryString.isEmpty()) {
                            return response + "?" + queryString;
                        } else {
                            return response;
                        }
                    })
            )
            .uri(appConfig.get(FC.URL))
        )
        .build();
}


     private GatewayFilter dynamicallyAddQueryParameters() {
        return (exchange, chain) -> {
            // Extract query parameters from the incoming request
            String name = exchange.getRequest().getQueryParams().getFirst("name");
            String otherParam = exchange.getRequest().getQueryParams().getFirst("otherParam");

            // Build the new query string dynamically
            UriComponentsBuilder uriBuilder = UriComponentsBuilder.fromUri(exchange.getRequest().getURI());

            if (name != null) {
                uriBuilder.queryParam("name", name);
            }
            if (otherParam != null) {
                uriBuilder.queryParam("otherParam", otherParam);
            }

            // Update the request URI with the new query string
            ServerWebExchange mutatedExchange = exchange.mutate()
                .request(exchange.getRequest().mutate()
                    .uri(uriBuilder.build().toUri())
                    .build())
                .build();

            return chain.filter(mutatedExchange);
        };
    }
    }
}
